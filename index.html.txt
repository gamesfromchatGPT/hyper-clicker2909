<!DOCTYPE html>
<html>
<head>
    <title>HYPER CLICKER ∞ MULTIPLAYER</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@900&display=swap');
        :root {
            --main-color: #00f7ff;
            --pulse: 0 0 20px var(--main-color);
        }
        body {
            margin: 0;
            background: #000 url('https://i.gifer.com/embedded/download/7wt0.gif') no-repeat;
            background-size: cover;
            font-family: 'Orbitron', sans-serif;
            color: var(--main-color);
            height: 100vh;
            overflow: hidden;
            perspective: 1000px;
        }
        #game {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            transform-style: preserve-3d;
        }
        #clicker {
            width: 250px;
            height: 250px;
            background: radial-gradient(circle, transparent 30%, var(--main-color) 150%);
            border: 4px solid var(--main-color);
            border-radius: 50%;
            box-shadow: var(--pulse), inset 0 0 50px #000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="48" viewBox="0 0 24 24"><path fill="%2300f7ff" d="M12 2L4 12l8 8 8-8z"/></svg>'), auto;
            transition: all 0.1s;
            position: relative;
            z-index: 10;
            animation: float 3s ease-in-out infinite;
        }
        @keyframes float {
            0%, 100% { transform: translateY(0) rotateX(0deg) rotateY(0deg); }
            50% { transform: translateY(-20px) rotateX(5deg) rotateY(5deg); }
        }
        #clicker:active {
            transform: scale(0.9) rotateX(10deg);
            box-shadow: 0 0 50px var(--main-color);
        }
        #score {
            font-size: 72px;
            margin: 30px;
            text-shadow: var(--pulse);
            letter-spacing: 5px;
        }
        #missions {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border: 2px solid var(--main-color);
            border-radius: 10px;
            max-width: 300px;
        }
        .mission {
            margin: 10px 0;
            padding: 8px;
            border-bottom: 1px dashed var(--main-color);
        }
        #twitch-chat {
            position: absolute;
            bottom: 20px;
            right: 20px;
            width: 250px;
            height: 300px;
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid var(--main-color);
            overflow-y: auto;
            padding: 10px;
            font-family: 'Courier New', monospace;
        }
        #leaderboard {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border: 2px solid var(--main-color);
            border-radius: 10px;
            width: 250px;
        }
        .message {
            margin: 5px 0;
            animation: messageIn 0.3s ease-out;
        }
        @keyframes messageIn {
            from { opacity: 0; transform: translateX(10px); }
            to { opacity: 1; transform: translateX(0); }
        }
        .player-score {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <div id="game">
        <div id="missions">
            <h3>МИССИИ:</h3>
            <div id="mission-list"></div>
        </div>
        
        <div id="leaderboard">
            <h3>ТОП ИГРОКОВ:</h3>
            <div id="top-players"></div>
        </div>
        
        <div id="score">0</div>
        <div id="clicker">HYPER CLICK</div>
        
        <div id="twitch-chat">
            <div class="message">System: Добро пожаловать в мультиплеер!</div>
        </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-database-compat.js"></script>
    <script>
        // Игровые переменные
        let score = 0;
        let clickPower = 1;
        let playerName = "";
        let isConnected = false;
        
        const missions = [
            { goal: 100, reward: 50, text: "Сделай 100 кликов" },
            { goal: 500, reward: 200, text: "500 кликов — ты монстр!" },
            { goal: 1000, reward: 500, text: "Легендарные 1000 кликов" }
        ];
        
        // Элементы
        const scoreElement = document.getElementById("score");
        const clicker = document.getElementById("clicker");
        const missionList = document.getElementById("mission-list");
        const twitchChat = document.getElementById("twitch-chat");
        const topPlayersList = document.getElementById("top-players");
        
        // Firebase конфиг (ЗАМЕНИ НА СВОЙ!)
        const firebaseConfig = {
            apiKey: "AIzaSyD8f7sTZ4J6o8Q9X7v3q7Z4X6X6X6X6X6X",
            authDomain: "hyperclicker-12345.firebaseapp.com",
            databaseURL: "https://hyperclicker-12345-default-rtdb.firebaseio.com",
            projectId: "hyperclicker-12345",
            storageBucket: "hyperclicker-12345.appspot.com",
            messagingSenderId: "1234567890",
            appId: "1:1234567890:web:abcdef1234567890"
        };
        
        // Инициализация Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();
        
        // Генерация миссий
        function generateMissions() {
            missionList.innerHTML = '';
            missions.forEach(mission => {
                const div = document.createElement("div");
                div.className = "mission";
                div.innerHTML = `
                    <p>${mission.text}</p>
                    <progress value="${Math.min(score, mission.goal)}" max="${mission.goal}"></progress>
                    <p>Награда: ${mission.reward}⚡</p>
                `;
                missionList.appendChild(div);
            });
        }
        
        // Twitch-чат (фейковый)
        const messages = [
            "GG!",
            "Кликаешь как бог!",
            "Когда стрим?",
            "Сколько часов ты уже кликаешь?",
            "Подпишись на канал!"
        ];
        
        function addChatMessage(msg) {
            const messageElement = document.createElement("div");
            messageElement.className = "message";
            messageElement.textContent = msg;
            twitchChat.appendChild(messageElement);
            twitchChat.scrollTop = twitchChat.scrollHeight;
        }
        
        setInterval(() => {
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            addChatMessage(User${Math.floor(Math.random() * 1000)}: ${randomMessage});
        }, 3000);
        
        // Обновление таблицы лидеров
        function updateLeaderboard() {
            database.ref('scores').orderByValue().limitToLast(10).once('value', (snapshot) => {
                const scores = snapshot.val();
                topPlayersList.innerHTML = '';
                
                if (!scores) {
                    topPlayersList.innerHTML = '<p>Пока нет игроков</p>';
                    return;
                }
                
                const sorted = Object.entries(scores).sort((a, b) => b[1] - a[1]);
                sorted.forEach(([name, score], index) => {
                    const playerDiv = document.createElement("div");
                    playerDiv.className = "player-score";
                    playerDiv.innerHTML = `
                        <span>${index + 1}. ${name}</span>
                        <span>${score}</span>
                    `;
                    topPlayersList.appendChild(playerDiv);
                });
            });
        }
        
        // Отправка счета на сервер
        function updateGlobalScore() {
            if (!playerName || !isConnected) return;
            database.ref('scores/' + playerName).set(score);
        }
        
        // Визуальные эффекты
        function createExplosion() {
            for (let i = 0; i < 10; i++) {
                const particle = document.createElement("div");
                particle.style.position = "absolute";
                particle.style.width = "8px";
                particle.style.height = "8px";
                particle.style.background = hsl(${Math.random() * 60 + 180}, 100%, 50%);
                particle.style.borderRadius = "50%";
                particle.style.left = "50%";
                particle.style.top = "50%";
                particle.style.boxShadow = "0 0 10px currentColor";
                particle.style.transform = "translate(-50%, -50%)";
                particle.style.animation = explode ${Math.random() * 0.5 + 0.5}s linear forwards;
                
                document.getElementById("game").appendChild(particle);
                
                setTimeout(() => {
                    particle.remove();
                }, 1000);
            }
        }
        
        // CSS для взрывов
        const style = document.createElement("style");
        style.textContent = `
            @keyframes explode {
                0% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
                100% { transform: translate(${Math.random() * 200 - 100}px, ${Math.random() * 200 - 100}px) scale(0); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
        
        // Обновление счета
        function updateScore() {
            scoreElement.textContent = score;
            generateMissions();
            updateGlobalScore();
        }
        
        // Кликер
        clicker.addEventListener("click", () => {
            score += clickPower;
            updateScore();
            createExplosion();
            
            missions.forEach(mission => {
                if (score === mission.goal) {
                    score += mission.reward;
                    addChatMessage(System: ${playerName} выполнил миссию "${mission.text}"!);
                    updateScore();
                }
            });
        });
        
        // Запуск игры
        playerName = prompt("Введи имя для таблицы лидеров:") || "Player" + Math.floor(Math.random() * 1000);
        isConnected = true;
        addChatMessage(System: ${playerName} присоединился к игре!);
        
        generateMissions();
        updateLeaderboard();
        setInterval(updateLeaderboard, 5000);
        
        setInterval(() => {
            if (Math.random() > 0.95) {
                clicker.style.boxShadow = "0 0 50px #ff00ff";
                setTimeout(() => {
                    clicker.style.boxShadow = "var(--pulse)";
                }, 300);
            }
        }, 1000);
    </script>
</body>
</html>